import java.nio.ByteBuffer;

import org.junit.Test;

/**
 * 1. 缓冲区（Buffer）:  在java Nio 中负责数据的存取。缓冲区就是数组。用于储存不同数据类型的数据
 * 		根据数据类型 不同（Boolean 除外）：提供了相应类型的暖冲区
 * ByteBuffer
 * CharBuffer
 * ShortBuffer
 * IntBuffer
 * LongBuffer
 * FloatBuffer
 * DoubleBuffer
 * 
 * 上述缓冲区的管理方式几乎一致，通过 allocate() 获取缓冲区
 * @author HeWei
 *
 *2  缓冲区 存取数据的核心两个方法:
 *		put(): 存入数据到缓冲区中;
 *		get(): 获取缓冲区中的数据
 *
 *4  缓冲区的四个核心属性:
 *		capacity : 容量， 表示缓冲区中最大存储数据的容量。一旦声明不能改变。
 *		limit	: 界限，表示缓冲区中可以操作数据的大小。（limit 后的数据不能进行读写）
 *		position :	位置，表示缓冲区中正在操作数据的位置。
 *		
 *		position <=limit <=capacity
 */
public class TestBuffer {

	
	@Test
	public  void  test1() {
		
		String str="abcde";
		// 1.  分配一个 指定大小的缓存区
		ByteBuffer buffer=ByteBuffer.allocate(1024);
		
		System.out.println(buffer.position());
		System.out.println(buffer.limit());
		System.out.println(buffer.capacity());
		
		// 2, 利用put() 存入数据缓冲区
		 buffer.put(str.getBytes());
		 
		System.out.println("................");
		System.out.println(buffer.position());
		System.out.println(buffer.limit());
		System.out.println(buffer.capacity());
		
		//3  切换成读取数据的模式
		buffer.flip();
		System.out.println("...................");
		System.out.println(buffer.position());
		System.out.println(buffer.limit());
		System.out.println(buffer.capacity());
		
		//4 读取数据
		buffer.get(1);
		 
		 
		 
		
	}
}
